<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | So You Want to Go to Code School]]></title>
  <link href="http://codeschoolbook.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://codeschoolbook.github.io/"/>
  <updated>2016-08-28T13:42:55-07:00</updated>
  <id>http://codeschoolbook.github.io/</id>
  <author>
    <name><![CDATA[Katie Leonard]]></name>
    <email><![CDATA[keighty.leonard@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Your 90-day Apprenticeship Starts After Code School]]></title>
    <link href="http://codeschoolbook.github.io/blog/2015/your-90-day-apprenticeship-starts-after-code-school/"/>
    <updated>2015-10-01T00:00:00-07:00</updated>
    <id>http://codeschoolbook.github.io/blog/2015/your-90-day-apprenticeship-starts-after-code-school</id>
    <content type="html"><![CDATA[<p>Being a beginner is hard in general, and being a beginner programmer is even harder. Not only are you straining your mental muscles to wrap your head around new abstract ways of thinking, but you are also adapting to new environments, new coworkers, sometimes even a new city. The great thing about programming is that you are surrounded by people who are also working things out for the first time: new problems, new technologies, and new ideas.</p>

<p>Code school is just the start of your programming education. Doctors, plumbers, and electricians don&rsquo;t allow students fresh out of school to begin plying their trade on critical systems, so it&rsquo;s crazy to think that a programmer could do the same (from Robert Martin, <a href="http://www.amazon.com/The-Clean-Coder-Professional-Programmers/dp/0137081073" target="_blank">The Clean Coder: A Code of Conduct for Professional Programmers</a>). Dev Bootcamp co-founder Shereef Bishay said in an <a href="http://www.usatoday.com/story/tech/2014/01/31/california-computer-boot-camps-cited/5078521/" target="_blank">interview with USA Today</a> that his school is more of an apprenticeship program than an educational institution, but really your 90-day apprenticeship starts after code school. It begins when you land your first job in the real world of software development. <!--more--></p>

<h2>How to be an awesome programming apprentice</h2>

<p>Being an extraordinary apprentice means asking lots of questions. Keep track of all the questions you ask, and present them to your manager at your three-month review. It will show how far you&rsquo;ve come and will leave a breadcrumb trail that other juniors can follow.</p>

<p>Another way you can be an awesome apprentice is by taking the hardest ticket from the pile and pairing with another engineer to solve it. Picking something you don&rsquo;t know how to do will stretch your skills and connect you with mentors.</p>

<p>Finally, you can be a great apprentice by not being afraid to say something stupid (from Michael Lopp, <a href="http://www.amazon.com/Managing-Humans-Humorous-Software-Engineering/dp/1430243147/ref=sr_1_1?ie=UTF8&amp;qid=1443494332&amp;sr=8-1&amp;keywords=managing+humans" target="_blank">Managing Humans: Biting and Humorous Tales of a Software Engineering Manager</a>). Not socially-unacceptable stupid&hellip; that should be avoided whenever possible. Saying something stupid means taking a chance on sharing your half-baked idea based on half-understanding in a meeting. If your coworkers are awesome like mine, they will gently correct your misapprehension and pretend not to see how red your ears get when you&rsquo;re embarrassed. What you&rsquo;ll demonstrate through your fumblings is a desire to make connections and work out the complexity you are learning.</p>

<p>My first job in tech has been an apprenticeship on many levels. I&rsquo;ve adapted to the frequent rate of change and have started from scratch on each team I have worked with. I&rsquo;m getting good at being an apprentice. I got there by getting comfortable with being uncomfortable. When you land your first job after code school, be a good apprentice &ndash; that means reaching for the information that will help your understanding and allowing yourself the time to get there.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What if You Donâ€™t Love Programming at First "Hello World!"]]></title>
    <link href="http://codeschoolbook.github.io/blog/2015/what-if-you-dont-love-programming-at-first-hello-world/"/>
    <updated>2015-09-28T00:00:00-07:00</updated>
    <id>http://codeschoolbook.github.io/blog/2015/what-if-you-dont-love-programming-at-first-hello-world</id>
    <content type="html"><![CDATA[<p>&ldquo;I don&rsquo;t enjoy programming. Will I once I am good at it?&rdquo; This question was posted recently on <a href="https://www.switchup.org/questions/i-don-t-enjoy-programming-will-i-enjoy-it-once-i-am-good-at-it">Switchup.org</a>, a resource site for people considering code school. Learning how to program is a difficult challenge, and it can be hard to understand the rewards when you are struggling with the foundations. I asked myself the same question when I was tackling the first steps, but I didn&rsquo;t have to wait until I was good at programming (I am still waiting to be good at programming) before I began to enjoy it. <!--more-->Breaking through a difficult problem became the part that I enjoyed, but I needed a few breakthroughs before I got completely hooked. If you are mired in a problem that you don&rsquo;t know how to solve, it&rsquo;s natural to question your devotion. If you find that you are not enjoying the process, take a step back to gain some perspective.</p>

<p>Earlier this year I was working on a very difficult project, and I would often come up against problems that I had no idea how to solve. I felt in over my head and had strong feelings of <a href="https://en.wikipedia.org/wiki/Impostor_syndrome" target="_blank">imposter syndrome</a>. I was struggling with some very challenging technical problems, and one of my amazing mentors shared her own mantra for putting a problem in perspective: &ldquo;There is a finite amount of time that you will work at this and not understand it.&rdquo;</p>

<p>Most programming challenges are not like <a href="https://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem" target="_blank">Fermat&rsquo;s Last Theorem</a> (a math problem that wasn&rsquo;t solved until 358 years after it was published). They can usually be broken down into manageable (and solvable) chunks. If you can&rsquo;t break down the problem or you stay stuck for more than an hour &ndash; find help! <a href="http://stackoverflow.com/" target="_blank">StackOverflow</a>, <a href="https://groups.google.com/forum/#!overview" target="_blank">Google Groups</a>, <a href="http://github.com" target="_blank">GitHub</a>, and <a href="http://www.meetup.com/" target="_blank">Meetups</a> are communities of people who love a programming challenge. If you come away from a tough problem with a solution, or at least a few extra tools to use the next time you are stuck, then that is a resounding success.</p>

<p>Curiosity, determination, and creativity are the most important features of a good programmer. If you&rsquo;re considering going to code school but you don&rsquo;t love programming, consider <a href="http://codeschoolbook.com/what-else-you-can-do-after-code-school/">all of the other options that code school can open up</a> for you. If you&rsquo;re still unsure, try a different programming language, framework, or medium. Try to make something useful, like a game, a blog site, or a to-do list. You don&rsquo;t have to start out with a passion for programming, but you do need curiosity and a high tolerance for frustration.</p>
]]></content>
  </entry>
  
</feed>
